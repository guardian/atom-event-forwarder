AWSTemplateFormatVersion: '2010-09-09'
Description: "Lambda function to pass media atom related events on to a topic or stream in another account. Contact multimediatech@theguardian.com for details"
Parameters:
  CapiStreamArn:
    Type: String
    Description: Arn of the Crier kinesis stream to attach to
  DestinationStreamName:
    Type: String
    Description: Name, not ARN, of a Kinesis string to forward on to
  DestinationTopicArn:
    Type: String
    Description: ARN of an SNS topic to forward on to
  CrossAccountRoleArn:
    Type: String
    Description: ARN of a cross-account role to assume when posting messages out
  MessageBatchSize:
    Type: Number
    Description: The lambda should get called with this many messages at once
    Default: 100
  ThreadCount:
    Type: Number
    Description: Maximum number of threads the lambda should use
    Default: 8
  App:
    Type: String
    Description: Application identifier for RiffRaff
    Default: atom-event-forwarder
  Stack:
    Type: String
    Description: Stack identifier for RiffRaff
    Default: content-api
  Stage:
    Type: String
    AllowedValues:
      - CODE
      - DEV
      - PROD
    Description: Deployment stage
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaLogAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: "*"
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: LambdaDLQAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - sqs:SendMessage
                - sqs:SendMessageBatch
                Resource: !GetAtt DeadLetterQueue.Arn
        - PolicyName: KinesisAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - kinesis:GetRecords
                - kinesis:GetShardIterator
                - kinesis:DescribeStream
                - kinesis:ListStreams
                #??? - does this need to be *???
                Resource: !Ref CapiStreamArn
        - PolicyName: CrossAccountAccess
          PolicyDocument:
              Version: 2012-10-17
              Statement:
                Effect: Allow
                Action:
                - sts:AssumeRule
                Resource: !Ref CrossAccountRoleArn
  DeadLetterQueue:
    Type: AWS::SQS::Queue
  LaunchDetectorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: content-api-dist
        S3Key: !Sub ${Stack}/${Stage}/${App}/atom-event-forwarder.jar
      Description: Passes Atom related events from Crier on to another AWS account for processing
      FunctionName: !Sub atom-event-forwarder-${Stage}
      Handler: AtomForwarderLambda
      Role: !Sub ${LambdaRole.Arn}
      Runtime: java8
      Timeout: 60
      MemorySize: 256
#      DeadLetterConfig:
#        TargetArn: !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          CRIER_STREAM: !Ref CapiStreamArn
          DESTINATION_STREAM_NAME: !Ref DestinationStreamName
          DESTINATION_TOPIC_ARN: !Ref DestinationTopicArn
          CROSS_ACCOUNT_ROLE_ARN: !Ref CrossAccountRoleArn
          JAVA_TOOL_OPTIONS: !Sub -Dscala.concurrent.context.numThreads=${ThreadCount} -Dscala.concurrent.context.maxThreads=${ThreadCount}
          #this is needed as SNS sdk seems to fail if an explicit region is not provided :(
          EXPLICIT_REGION: !Ref "AWS::Region"
          THREADS: !Ref ThreadCount
#  LambdaInvokePermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: lambda:InvokeFunction
#      Principal: kinesis.amazonaws.com
#      SourceArn: !Ref CapiStreamArn
#      FunctionName: !Sub ${LaunchDetectorLambda.Arn}
  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Ref MessageBatchSize
      Enabled: true
      EventSourceArn: !Ref CapiStreamArn
      FunctionName: !GetAtt LaunchDetectorLambda.Arn
      StartingPosition: TRIM_HORIZON